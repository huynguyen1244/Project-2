import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { Helmet } from "react-helmet";
import { useToast } from "@/hooks/use-toast";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { Badge } from "@/components/ui/badge";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Calendar,
  MapPin,
  Users,
  Clock,
  CreditCard,
  XCircle,
  AlertCircle,
  CheckCircle,
  AlertTriangle,
} from "lucide-react";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { format } from "date-fns";
import { Link } from "wouter";
import type { Booking, Tour, TourDate } from "@/../../shared/schema";

// Type for booking with tour and tour date information
type BookingWithTour = Booking & {
  tour: Tour;
  tourDate: TourDate;
};

const BookingHistoryPage = () => {
  const { toast } = useToast();
  const [bookingToCancel, setBookingToCancel] = useState<number | null>(null);

  const {
    data: bookings,
    isLoading,
    error,
  } = useQuery<BookingWithTour[]>({
    queryKey: ["/api/bookings"],
  });
  const cancelBookingMutation = useMutation({
    mutationFn: async (bookingId: number) => {
      const res = await apiRequest("POST", `/api/bookings/${bookingId}/cancel`);
      return await res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/bookings"] });
      toast({
        title: "ƒê√£ H·ªßy ƒê·∫∑t Tour",
        description: "ƒê·∫∑t tour c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng.",
      });
      setBookingToCancel(null);
    },
    onError: (error: Error) => {
      toast({
        title: "H·ªßy Th·∫•t B·∫°i",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  const handleCancelBooking = (bookingId: number) => {
    setBookingToCancel(bookingId);
  };

  const confirmCancelBooking = () => {
    if (bookingToCancel) {
      cancelBookingMutation.mutate(bookingToCancel);
    }
  };
  const getStatusBadge = (status: string) => {
    switch (status) {
      case "confirmed":
        return (
          <Badge className="bg-green-100 text-green-800 hover:bg-green-200">
            <CheckCircle className="h-3 w-3 mr-1" />
            ƒê√£ X√°c Nh·∫≠n
          </Badge>
        );
      case "cancelled":
        return (
          <Badge variant="outline" className="text-muted-foreground">
            <XCircle className="h-3 w-3 mr-1" />
            ƒê√£ H·ªßy
          </Badge>
        );
      case "completed":
        return (
          <Badge className="bg-blue-100 text-blue-800 hover:bg-blue-200">
            <CheckCircle className="h-3 w-3 mr-1" />
            Ho√†n Th√†nh
          </Badge>
        );
      default:
        return (
          <Badge className="bg-yellow-100 text-yellow-800 hover:bg-yellow-200">
            <AlertTriangle className="h-3 w-3 mr-1" />
            ƒêang Ch·ªù
          </Badge>
        );
    }
  };
  return (
    <>
      {" "}
      <Helmet>
        <title>L·ªãch S·ª≠ ƒê·∫∑t Tour | TravelTour</title>
        <meta
          name="description"
          content="Xem v√† qu·∫£n l√Ω c√°c ƒë·∫∑t tour c·ªßa b·∫°n v·ªõi TravelTour."
        />
      </Helmet>{" "}
      <div className="container mx-auto p-6">
        <div className="mb-8">
          <h1 className="text-3xl font-bold font-poppins text-foreground mb-2">
            ƒê·∫∑t Tour C·ªßa T√¥i
          </h1>
          <p className="text-muted-foreground">
            Xem v√† qu·∫£n l√Ω c√°c ƒë·∫∑t tour c·ªßa b·∫°n
          </p>
        </div>

        {isLoading ? (
          <div className="grid gap-6">
            {[1, 2, 3].map((i) => (
              <Card key={i} className="overflow-hidden">
                <CardHeader className="pb-0">
                  <div className="flex justify-between mb-2">
                    <Skeleton className="h-4 w-24" />
                    <Skeleton className="h-6 w-24 rounded-full" />
                  </div>
                  <Skeleton className="h-8 w-3/4 mb-2" />
                  <Skeleton className="h-4 w-1/2" />
                </CardHeader>
                <CardContent className="py-6">
                  <div className="grid md:grid-cols-4 gap-6">
                    <Skeleton className="h-20 w-full" />
                    <Skeleton className="h-20 w-full" />
                    <Skeleton className="h-20 w-full" />
                    <Skeleton className="h-20 w-full" />
                  </div>
                </CardContent>
                <CardFooter className="flex justify-between">
                  <Skeleton className="h-10 w-24" />
                  <Skeleton className="h-10 w-36" />
                </CardFooter>
              </Card>
            ))}
          </div>
        ) : error ? (
          <div className="text-center py-10">
            <AlertCircle className="h-12 w-12 text-destructive mx-auto mb-4" />
            <h2 className="text-xl font-bold mb-2">L·ªói Khi T·∫£i ƒê·∫∑t Tour</h2>
            <p className="text-muted-foreground mb-6">
              Ch√∫ng t√¥i kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ ƒë·∫∑t tour c·ªßa b·∫°n. Vui l√≤ng th·ª≠
              l·∫°i.
            </p>
            <Button
              onClick={() =>
                queryClient.invalidateQueries({ queryKey: ["/api/bookings"] })
              }
            >
              Th·ª≠ L·∫°i
            </Button>
          </div>
        ) : bookings?.length === 0 ? (
          <div className="text-center py-16">
            <div className="text-4xl mb-4">üåç</div>
            <h2 className="text-xl font-bold mb-2">Ch∆∞a C√≥ ƒê·∫∑t Tour N√†o</h2>
            <p className="text-muted-foreground mb-6">
              B·∫°n ch∆∞a ƒë·∫∑t tour n√†o. B·∫Øt ƒë·∫ßu kh√°m ph√° c√°c tour c·ªßa ch√∫ng t√¥i ƒë·ªÉ
              b·∫Øt ƒë·∫ßu cu·ªôc phi√™u l∆∞u ti·∫øp theo!
            </p>{" "}
            <Button asChild>
              <Link href="/tours">T√¨m Tours</Link>
            </Button>
          </div>
        ) : (
          <div className="grid gap-6">
            {bookings?.map((booking) => (
              <Card key={booking.id} className="overflow-hidden">
                <CardHeader>
                  <div className="flex flex-wrap justify-between items-center">
                    <CardTitle className="text-xl">
                      {booking.tour.title}
                    </CardTitle>
                    {getStatusBadge(booking.status)}
                  </div>
                  <CardDescription>
                    <div className="flex items-center mt-1">
                      <MapPin className="h-4 w-4 mr-1 text-muted-foreground" />
                      <span>
                        {booking.tour.destination},{" "}
                        {booking.tour.destinationCountry}
                      </span>
                    </div>
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="grid md:grid-cols-4 gap-4 text-sm">
                    {" "}
                    <div className="flex flex-col p-3 bg-muted rounded-lg">
                      <div className="flex items-center text-muted-foreground mb-1">
                        <Calendar className="h-4 w-4 mr-2" />
                        <span>Ng√†y ƒêi</span>
                      </div>
                      <div className="font-medium">
                        {format(
                          new Date(booking.tourDate.startDate),
                          "MMM d, yyyy"
                        )}{" "}
                        -{" "}
                        {format(
                          new Date(booking.tourDate.endDate),
                          "MMM d, yyyy"
                        )}
                      </div>
                    </div>
                    <div className="flex flex-col p-3 bg-muted rounded-lg">
                      <div className="flex items-center text-muted-foreground mb-1">
                        <Users className="h-4 w-4 mr-2" />
                        <span>S·ªë Ng∆∞·ªùi</span>
                      </div>
                      <div className="font-medium">
                        {booking.numberOfTravelers}{" "}
                        {booking.numberOfTravelers === 1 ? "Ng∆∞·ªùi" : "Ng∆∞·ªùi"}
                      </div>
                    </div>
                    <div className="flex flex-col p-3 bg-muted rounded-lg">
                      <div className="flex items-center text-muted-foreground mb-1">
                        <Clock className="h-4 w-4 mr-2" />
                        <span>Th·ªùi Gian</span>
                      </div>
                      <div className="font-medium">
                        {booking.tour.duration}{" "}
                        {booking.tour.duration === 1 ? "Ng√†y" : "Ng√†y"}
                      </div>
                    </div>
                    <div className="flex flex-col p-3 bg-muted rounded-lg">
                      <div className="flex items-center text-muted-foreground mb-1">
                        <CreditCard className="h-4 w-4 mr-2" />
                        <span>T·ªïng Ti·ªÅn</span>
                      </div>
                      <div className="font-medium">
                        ${booking.totalPrice.toFixed(2)}
                      </div>
                    </div>
                  </div>
                </CardContent>{" "}
                <CardFooter className="flex justify-between">
                  <Button variant="outline" asChild>
                    <Link href={`/tours/${booking.tourId}`}>Xem Tour</Link>
                  </Button>
                  {booking.status === "confirmed" && (
                    <Button
                      variant="destructive"
                      onClick={() => handleCancelBooking(booking.id)}
                      disabled={cancelBookingMutation.isPending}
                    >
                      {cancelBookingMutation.isPending &&
                      bookingToCancel === booking.id
                        ? "ƒêang H·ªßy..."
                        : "H·ªßy ƒê·∫∑t Tour"}
                    </Button>
                  )}
                </CardFooter>
              </Card>
            ))}
          </div>
        )}
      </div>{" "}
      <AlertDialog
        open={bookingToCancel !== null}
        onOpenChange={(open) => !open && setBookingToCancel(null)}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>H·ªßy ƒê·∫∑t Tour</AlertDialogTitle>
            <AlertDialogDescription>
              B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ƒë·∫∑t tour n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ
              ho√†n t√°c. B·∫°n c√≥ th·ªÉ ƒë·ªß ƒëi·ªÅu ki·ªán nh·∫≠n ho√†n ti·ªÅn theo ch√≠nh s√°ch
              h·ªßy c·ªßa ch√∫ng t√¥i.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Gi·ªØ ƒê·∫∑t Tour</AlertDialogCancel>
            <AlertDialogAction
              onClick={confirmCancelBooking}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
            >
              C√≥, H·ªßy ƒê·∫∑t Tour
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
};

export default BookingHistoryPage;
